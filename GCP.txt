# 注册VPS
提前准备好地址

# 修改防火墙 
进入控制台后，依次点击菜单–网络–防火墙规则((VPC network > Firewall rules)。然后点击右上角的“创建防火墙规则”。名字随便起一个就好，然后中间部分不用动。“目标”选“网络中的所有实例”，“来源过滤”选择“IP地址范围”，并在下方填写“0.0.0.0/0”，然后最下方选择“指定的协议和端口”，并在下方填入“tcp:0-65535;udp:0-65535”。然后点击创建。

流量方向出站、入站，各设置一条
inbound
outbound

目标：网络中的所有实例
IP范围：0.0.0.0/0
协议和端口：全部允许

ps:一定要注意选中---所有实例


# Add Metadata (元数据)
Computer Engine > SSH Keys


# 创建VM实例 
然后再回到菜单，选择“计算引擎”—“VM实例”—“创建实例”。
ps: 要注意选择ip和要允许https和http

# 解析域名
by cloudflare
如果使用cf 源证书，记得SSL 切换成安全(Full)

# 连接管理服务器
by Xshell /PuTTY


# SSH安全加固
使用非常规端口
Port 14722

限制身份验证最大尝试次数
MaxAuthTries 3

使用密钥进行身份验证
PubkeyAuthentication yes

禁用root账户登录
PermitRootLogin no

禁用空密码
PermitEmptyPasswords no

保护SSH密钥
ls -l /etc/ssh/*key
chmod 0600 /etc/ssh/*key

ls -l /etc/ssh/*pub
chmod 0644 /etc/ssh/*pub

显示最后一次登录的日期和时间
PrintLastLog yes

结束空闲的SSH会话
ClientAliveInterval 900
ClientAliveCountMax 0

禁用基于主机的身份认证
HostBasedAuthentication no

禁用X11Forwarding
X11Forwarding no

检查用户特定的配置文件
StrictModes yes

禁用不使用的身份验证方法
禁用 GSSAPI 认证
GSSAPIAuthentication no

禁用Kerberos认证
KerberosAuthentication no

禁用口令认证
PasswordAuthentication no


# 安装sudo
visudo
在 User Privilege Specification 下加入一行 vpsadmin ALL=(ALL) NOPASSWD: ALL 即可
vpsadmin用户临时使用root权限时，不用额外输入密码


# 查看信息
lsb_release -a
uname -a


# 安装相关依赖
:. Debian/Ubuntu
apt update 
apt upgrade
apt install socat htop nload
Note: GCP慎用apt upgrade

:. CentOS
yum update -y
 yum install curl wget socat -y


# 安装 OpenSSL
dpkg 系：
# apt-get install openssl
rhel 系：
# yum install openssl


# 开启BBR
echo "net.core.default_qdisc=fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.conf
sysctl -p

sysctl net.ipv4.tcp_available_congestion_control
lsmod | grep bbr	// 用于显示已经加载到内核中的模块的状态信息

:. 脚本开启
ylx2016/Linux-NetSpeed
wget -O tcpx.sh "https://github.com/ylx2016/Linux-NetSpeed/raw/master/tcpx.sh" && chmod +x tcpx.sh && ./tcpx.sh



# 改主机名
sudo hostnamectl set-hostname <your hostname>


#检查IP转发状态
sysctl net.ipv4.ip_forward
cat /proc/sys/net/ipv4/ip_forward

#禁止IP转发
# sudo vim /etc/sysctl.conf
{
net.ipv4.ip_forward = 0
}
# sysctl -p


# 查看公网IP
curl ifconfig.me
curl ip.sb
curl cip.cc
curl -s ipget.net


# 防火墙
:. 禁用防火墙
systemctl stop firewalld.service	#centos
systemctl disable firewalld.service	#centos
setenforce 0
ufw disable

:. 开放所有端口
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT	
iptables -P OUTPUT ACCEPT
iptables -F	#清空规则链
apt-get purge netfilter-persistent
reboot

Note:
-P 设置默认策略:iptables -P INPUT (DROP | ACCEPT)
-F 清空规则链


# 查看和释放80端口
:. 检查被占端口
netstat -tln
netstat -tulpn
netstat -tln | grep 80
netstat -anlp | grep 80


:. 查找占端口的进程
lsof -i:80

:. 杀掉占用端口的进程
kill -9 “PID"


# 生成uuid
cat /proc/sys/kernel/random/uuid
xray uuid


# IPv4优先
编辑 /etc/gai.conf文件，查找 precedence ::ffff:0:0/96 100 (IPv4映射地址) 将前面的注释 # 去掉并保存
sed -i 's/#precedence ::ffff:0:0\/96  100/precedence ::ffff:0:0\/96  100/' /etc/gai.conf


# 刷新dns缓存
:. Ubuntu 22刷新DNS
sudo resolvectl statistics && resolvectl flush-caches

:. Debian 11刷新DNS
sudo systemctl enable systemd-resolved.service
sudo systemd-resolve --flush-caches
OR
sudo service networking restart
sudo /etc/init.d/networking restart	# 暴力刷dns，重启网络


# 申请安装证书
sudo -i
apt install -y socat

--issue --test //测试证书申请
--force 参数的意思就是，在现有证书到期前，手动（强行）更新证书

mkdir /etc/ssl/private
curl https://get.acme.sh | sh -s email=gzpydlj@gmail.com
alias acme.sh=~/.acme.sh/acme.sh
acme.sh --upgrade --auto-upgrade
acme.sh --set-default-ca --server letsencrypt
acme.sh --issue --standalone -d <a.com> --keylength ec-256
#acme.sh --issue --alpn -d <a.com> --keylength ec-256  	  		         #独立tls alpn模式(默认443，使用--tlsport指定端口)
#acme.sh --issue --nginx -d <a.com> --keylength ec-256  	  		         #Nginx模式(nginx conf setup server_name)
#acme.sh --issue -d <a.com> --keylength ec-256 --webroot /usr/share/nginx/html/    #webroot模式
acme.sh --install-cert -d <a.com> --ecc \
--fullchain-file /etc/ssl/private/cert.crt \
--key-file /etc/ssl/private/private.key \
--reloadcmd "service nginx force-reload"

--------

export Domain=<your domain>
curl https://get.acme.sh | sh -s email=gzpydlj@gmail.com
alias acme.sh=~/.acme.sh/acme.sh
acme.sh --upgrade --auto-upgrade
acme.sh --set-default-ca --server letsencrypt
acme.sh --issue --standalone -d $Domain --keylength ec-256    #Standalone 模式(80端口空闲)
#acme.sh --issue --alpn -d $Domain --keylength ec-256  	  #独立tls alpn模式(默认443，使用--tlsport指定端口)
#acme.sh --issue --nginx -d $Domain --keylength ec-256  	  #Nginx模式(nginx conf setup server_name)
#acme.sh --issue -d $Domain --keylength ec-256 --webroot /usr/share/nginx/html/    #webroot模式
acme.sh --install-cert -d $Domain --ecc \
--fullchain-file /etc/ssl/private/ fullchain.cer \
--key-file /etc/ssl/private/private.key \
--reloadcmd "service nginx force-reload"

systemctl restart xray nginx && systemctl status xray nginx
systemctl daemon-reload && systemctl enable nginx
systemctl daemon-reload && systemctl enable xray

Note: 
重新打开才能使别名生效
权限问题，运行：
chown -R nobody:nogroup /etc/ssl/private/

DNS API模式申请证书
sudo -i
apt install -y socat

mkdir /etc/ssl/private
curl https://get.acme.sh | sh -s email=gzpydlj@gmail.com
alias acme.sh=~/.acme.sh/acme.sh
acme.sh --upgrade --auto-upgrade
acme.sh --set-default-ca --server letsencrypt
export CF_Key="<your CF API key> "
export CF_Email="<your CF Email>"
acme.sh --issue --dns dns_cf -d example.com -d *.example.com --keylength ec-256
acme.sh --install-cert -d example.com -d *.example.com --ecc \
--fullchain-file /etc/ssl/private/cert.crt \
--key-file /etc/ssl/private/private.key \
--reloadcmd "service nginx force-reload"

----
mkdir /etc/ssl/private
export Domain=<your.domain>
export Subdomain=<*.your.domain>
curl https://get.acme.sh | sh -s email=gzpydlj@gmail.com
alias acme.sh=~/.acme.sh/acme.sh
acme.sh --upgrade --auto-upgrade
acme.sh --set-default-ca --server letsencrypt
export CF_Key="<your CF API key> "
export CF_Email="<your CF Email>"
acme.sh --issue --dns dns_cf -d $Domain -d $Subdomain --keylength ec-256
acme.sh --install-cert -d $Domain -d $Subdomain --ecc \
--fullchain-file /etc/ssl/private/cert.crt \
--key-file /etc/ssl/private/private.key \
--reloadcmd "service nginx force-reload"


证书信息
acme.sh --info
acme.sh --list

失败怎么办
acme.sh --issue  .....  --debug 
acme.sh --issue  .....  --debug  2

curl -IkL -m20 http://<youre domain>


【定期更新证书】
crontab -l
crontab -e

chmod +x ~/xray_cert/xray-cert-renew.sh
{
#!/bin/bash

/home/vpsadmin/.acme.sh/acme.sh --install-cert -d a-name.yourdomain.com --ecc --fullchain-file /home/vpsadmin/xray_cert/xray.crt --key-file /home/vpsadmin/xray_cert/xray.key
echo "Xray Certificates Renewed"

chmod +r /home/vpsadmin/xray_cert/xray.key
echo "Read Permission Granted for Private Key"

sudo systemctl restart xray
echo "Xray Restarted"

# 1:00am, 1st day each month, run `xray-cert-renew.sh`
0 1 1 * *   bash /home/vpsadmin/xray_cert/xray-cert-renew.sh
}


【安装Nginx】
#--debian--#
sudo apt update
sudo apt install curl gnupg2 ca-certificates lsb-release debian-archive-keyring

curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \
    | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null

echo "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \
http://nginx.org/packages/debian `lsb_release -cs` nginx" \
    | sudo tee /etc/apt/sources.list.d/nginx.list

echo -e "Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n" \
    | sudo tee /etc/apt/preferences.d/99nginx

sudo apt update
sudo apt install nginx

#--ubuntu--#
sudo apt update
sudo apt install curl gnupg2 ca-certificates lsb-release lsubuntu-keyring

curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \
    | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null

echo "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \
http://nginx.org/packages/ubuntu `lsb_release -cs` nginx" \
    | sudo tee /etc/apt/sources.list.d/nginx.list

echo -e "Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n" \
    | sudo tee /etc/apt/preferences.d/99nginx

sudo apt update
sudo apt install nginx

systemctl restart xray
systemctl status xray nginx

systemctl daemon-reload && systemctl enable nginx
systemctl daemon-reload && systemctl enable xray


【下载配置】
curl -Lo /usr/local/etc/xray/config.json https://raw.githubusercontent.com/chika0801/Xray-examples/main/VLESS-TCP-XTLS-Vision/config_server_with_fallbacks.json && curl -Lo /etc/nginx/nginx.conf https://raw.githubusercontent.com/chika0801/Xray-examples/main/VLESS-TCP-XTLS-Vision/nginx.conf

-L/--location	跟踪重定向
-o/--output	把输出写到该文件中

【下载路由规则文件加强版】
curl -Lo /usr/local/share/xray/geoip.dat https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat && curl -Lo /usr/local/share/xray/geosite.dat https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat

【自动同步时间】
apt install -y systemd-timesyncd && systemctl enable --now systemd-timesyncd
或
apt install -y ntpdate && ntpdate pool.ntp.org

crontab -e
0 0 * * * /usr/sbin/ntpdate pool.ntp.org


修改文件方法
vim时输入"%d"清空
cat > /usr/local/etc/xray/config.json <<-EOF
{
}
EOF


重启程序
systemctl daemon-reload && systemctl restart xray && systemctl restart nginx
systemctl status xray && systemctl status nginx


测试
xray -test -config /usr/local/etc/xray/config.json
nginx -t

systemctl reload nginx && systemctl restart xray
systemctl status nginx xray


【nginx修改主页】
rm -rf /usr/share/nginx/html/*
cd /usr/share/nginx/html/
wget https://raw.githubusercontent.com/fy-deng/doprax-xray/main/3w/html9.zip
unzip html9.zip
rm html9.zip

HTTP 自动跳转 HTTPS
80 端口 Server 中加入下面的语句，并保存退出（可同时删除root和index两行）
return 301 https://$http_host$request_uri;
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        return 301 https://$host$request_uri;  
    }


【谷歌云续期】
注意全程隐身模式！
新谷歌云账户账单管理员添加旧账号(比如fydeng@gmail.com)，并重命名新结算账号
登录旧谷歌云账户，应用新结算账号到旧谷歌云账户项目


【acme】
:. fork from msk
wget -N --no-check-certificate https://raw.githubusercontent.com/fy-deng/acme-script/diy/acme.sh && bash acme.sh

:. fork from yg
bash <(curl -L -s https://raw.githubusercontent.com/fy-deng/acme-2/main/acme.sh)


【Naiveproxy】
使用 Chromium 的网络堆栈来伪装具有强大审查抵抗力和低可检测性的流量
:. fork from yg
wget -N https://raw.githubusercontent.com/fy-deng/naiveproxy_script/main/naiveproxy.sh && bash naiveproxy.sh

:. fork from misaka
wget -N --no-check-certificate https://raw.githubusercontent.com/fy-deng/naiveproxy-script/diy/naiveproxy.sh && bash naiveproxy.sh

:. by crazypeace/naive
如果希望和Caddy V2前置的VLESS/Vmess V2Ray共存需要先搭好V2Ray
:. Install
bash <(curl -L https://github.com/crazypeace/naive/raw/main/install.sh)
:. Uninstall
rm /etc/apt/sources.list.d/caddy-stable.list
apt remove -y caddy


【Hysteria】
专为恶劣网络环境进行优化的网络工具。基于修改版的 QUIC 协议。
#yg & me
客户端默认只开启http(8888)、socks5(8889)代理!
wget -N https://raw.githubusercontent.com/fy-deng/hysteria_script/main/hysteria.sh && bash hysteria.sh

#misaka
wget -N --no-check-certificate https://raw.githubusercontent.com/Misaka-blog/hysteria-install/main/hysteria.sh && bash hysteria.sh


# Hi_Hysteria
bash <(curl -fsSL https://git.io/hysteria.sh)

# chika0801/hysteria-install
one by one


【Tuic】
# me
wget -N https://raw.githubusercontent.com/fy-deng/tuic_script/main/tuic.sh && bash tuic.sh


【Sing-box】
:. BoxXt/installReality-diy (amd)
sudo curl -o installReality.sh https://raw.githubusercontent.com/fy-deng/installReality/diy/installReality.sh && sh ./installReality.sh

:. Arm
sudo curl -o installReality.sh https://raw.githubusercontent.com/fy-deng/installReality/diy/installReality2.sh && sh ./installReality.sh


:. Misaka-blog/sbox-reality
wget -N --no-check-certificate https://raw.githubusercontent.com/Misaka-blog/sbox-reality/main/reality.sh && bash reality.sh
管理命令为：bash reality.sh

:. sing-box-yes
bash <(curl -Ls https://raw.githubusercontent.com/FranzKafkaYu/sing-box-yes/master/install.sh)


【Xray】
XTLS/Xray-install
:. Install & Upgrade Xray-core to a pre-release version
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install --version 1.8.0

:. Install & Upgrade Xray-core and geodata with User=root, which will overwrite User in existing service files
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install -u root

:. Install & Upgrade Xray-core without geodata
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install --without-geodata

:. DIY
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install -u root --without-geodata --version 1.8.0

:. Remove Xray, include json and logs
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ remove --purge

installed: /etc/systemd/system/xray.service
installed: /etc/systemd/system/xray@.service

installed: /usr/local/bin/xray
installed: /usr/local/etc/xray/*.json

installed: /usr/local/share/xray/geoip.dat
installed: /usr/local/share/xray/geosite.dat

installed: /var/log/xray/access.log
installed: /var/log/xray/error.log

程序	/usr/local/bin/xray
配置	/usr/local/etc/xray/config.json
检查	xray -test -config /usr/local/etc/xray/config.json
路由规则文件	/usr/local/share/xray/
查看日志	journalctl -u xray --output cat -e
实时日志	journalctl -u xray --output cat -f

:. Remove Xray, include json and logs
# bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ remove --purge


// zxcvos/Xray-script (REALITY 管理脚本)
wget --no-check-certificate -O ${HOME}/Xray-script.sh https://raw.githubusercontent.com/zxcvos/Xray-script/main/reality.sh && bash ${HOME}/Xray-script.sh
curl -fsSL -o ${HOME}/Xray-script.sh https://raw.githubusercontent.com/zxcvos/Xray-script/main/reality.sh && bash ${HOME}/Xray-script.sh


// LordPenguin666/XTool (基于 Go 编写)
:. amd64
wget https://github.com/LordPenguin666/XTool/releases/download/latest/xtool
chmod +x xtool
./xtool

:. arm64
wget https://github.com/LordPenguin666/XTool/releases/download/latest/xtool-arm
chmod +x xtool-arm
./xtool-arm


// sajjaddg/xray-reality
 bash -c "$(curl -L https://raw.githubusercontent.com/sajjaddg/xray-reality/master/install.sh)"


// tdjnodj/xray_script (bug多)
wget https://raw.githubusercontent.com/tdjnodj/xray_script/main/xray.sh && bash xray.sh


// mack-a/v2ray-agent
wget -P /root -N --no-check-certificate "https://raw.githubusercontent.com/mack-a/v2ray-agent/master/install.sh" && chmod 700 /root/install.sh && /root/install.sh


// wulabing/Xray_onekey
wget -N --no-check-certificate -q -O install.sh "https://raw.githubusercontent.com/wulabing/Xray_onekey/main/install.sh" && chmod +x install.sh && bash install.sh

Nginx 前置
wget -N --no-check-certificate -q -O install.sh "https://raw.githubusercontent.com/wulabing/Xray_onekey/nginx_forward/install.sh" && chmod +x install.sh && bash install.sh


// atrandys/xray
:. xray
bash <(curl -Ls https://raw.githubusercontent.com/fy-deng/xray/main/install.sh)
or
bash <(curl -Ls https://raw.githubusercontent.com/fy-deng/xray/main/install_triple_config.sh)


// kirin10000/Xray-script (时间长)
Debian基系统(包括Ubuntu、Debian、deepin)：
apt --no-install-recommends -y install wget ca-certificates || (apt update && apt --no-install-recommends -y install wget ca-certificates)
wget -O Xray-TLS+Web-setup.sh https://github.com/kirin10000/Xray-script/raw/main/Xray-TLS+Web-setup.sh
bash Xray-TLS+Web-setup.sh


// proxysu/ProxySU



【X-UI】
:. FranzKafkaYu/x-ui
bash <(curl -Ls https://raw.githubusercontent.com/FranzKafkaYu/x-ui/master/install.sh)

:. x-ui-msk
bash <(wget -qO- https://gitlab.com/Misaka-blog/x-ui-msk/-/raw/main/install.sh)

:. x-ui-yg（纯IPV4/纯IPV6的VPS直接运行一键脚本）
wget -N https://gitlab.com/rwkgyg/x-ui-yg/raw/main/install.sh && bash install.sh

:. vaxilu/x-ui (原版)
bash <(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)


【 Trojan】

1) atrandys trojan一键脚本
bash <(curl -L -s https://bit.ly/3kPUDon)
bash <(curl -L -s https://raw.githubusercontent.com/fy-deng/trojan-1/master/trojan_mult.sh)

2) Jrohy一键脚本
#安装/更新
source <(curl -sL https://git.io/trojan-install)
#卸载
source <(curl -sL https://git.io/trojan-install) --remove

3) trojanpanel/install-script
支持Xray/Trojan-Go/Hysteria/NaiveProxy的多用户Web管理面板:
:. 联机版（推荐）
source <(curl -L https://github.com/trojanpanel/install-script/raw/main/install_script.sh)

4) phlinhng/Trojan-go
curl -fsSL https://cdn.jsdelivr.net/gh/phlinhng/v2ray-tcp-tls-web@main/src/xwall.sh -o ~/xwall.sh && bash ~/xwall.sh

5) maplecool/easytrojan
世界上最简单的Trojan部署脚本，仅需一行命令即可搭建一台代理服务器
:. 首次安装
curl https://raw.githubusercontent.com/maplecool/easytrojan/main/easytrojan.sh -o easytrojan.sh && chmod +x easytrojan.sh && bash easytrojan.sh password
Note：请将结尾的password更换为自己的密码，仅限字母、数字、下划线，非多密码管理用途无需使用

:. 重新安装
systemctl stop caddy.service && curl https://raw.githubusercontent.com/maplecool/easytrojan/main/easytrojan.sh -o easytrojan.sh && chmod +x easytrojan.sh && bash easytrojan.sh password

:. 完全卸载
systemctl stop caddy.service && systemctl disable caddy.service && rm -rf /etc/caddy /usr/local/bin/caddy /etc/systemd/system/caddy.service


【Shadowsocks】
:. loyess/2022
Installation
curl -OL https://github.com/loyess/2022/raw/main/2022script.sh
chmod +x 2022script.sh
./2022script.sh

Specify path install
curl -OL https://github.com/loyess/2022/raw/main/2022script.sh
chmod +x 2022script.sh
./2022script.sh --specifypi /etc/ss-rust

Uninstall
./2022script.sh --remove


【Wireguard】
1) fy-deng (mod base on atrandys)
curl -O https://raw.githubusercontent.com/fy-deng/wireguard/master/wg_mult.sh && chmod +x wg_mult.sh && ./wg_mult.sh

2) 逗比(hongwenjun/vps_setup)
:. Debian
wget -qO- git.io/fptwc | bash

:. Ubuntu
wget -qO- git.io/fpcnL | bash

:. CentOS 7
wget -qO- git.io/fhnhS | bash

3) wburke520/wireguard-ipv6
:. debian (IPv6 is ready)
wget -qO- git.io/fhhea | bash

:. ubuntu (IPv6 is ready)
wget -qO- git.io/fhjAT | bash

4) angristan
curl -O https://raw.githubusercontent.com/angristan/wireguard-install/master/wireguard-install.sh
chmod +x wireguard-install.sh
./wireguard-install.sh

5) Nyr/wireguard-install
wget https://git.io/wireguard -O wireguard-install.sh && bash wireguard-install.sh

6) teddysun/across
wget --no-check-certificate -O /opt/wireguard.sh https://raw.githubusercontent.com/teddysun/across/master/wireguard.sh
chmod 755 /opt/wireguard.sh

7) 
bash <(curl -fsSL git.io/warp.sh) wg

8) ARM架构
wget -O install.sh https://gitlab.com/cyber5k/mistborn/-/raw/master/scripts/install.sh && sudo -E bash ./install.sh


【Openvpn】
:. angristan/openvpn-install
curl -O https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh
chmod +x openvpn-install.sh

:. Nyr/openvpn-install
wget https://git.io/vpn -O openvpn-install.sh && bash openvpn-install.sh


【Tailscale】
# Install
apt update
curl -fsSL https://tailscale.com/install.sh | sh

# Use as exit node
sudo tailscale up --advertise-exit-node

# Uninstall
sudo apt-geet remove tailscale

【CFwarp】
:. yg（22.12.16更新）Cloudflare warp多功能wgcf与warp-go二合一脚本，重置第三版发布
wget -N --no-check-certificate https://gitlab.com/rwkgyg/CFwarp/raw/main/CFwarp.sh && bash CFwarp.sh

在VPS下实时查看下当前WARP是否开启的代码
IPV4出站：curl -s4m5 https://www.cloudflare.com/cdn-cgi/trace
IPV6出站：curl -s6m5 https://www.cloudflare.com/cdn-cgi/trace
log

:. fscarmen/warp
首次运行
wget -N https://raw.githubusercontent.com/fscarmen/warp/main/menu.sh && bash menu.sh [option] [lisence]
再次运行
warp [option] [lisence]

首次运行
wget -N https://raw.githubusercontent.com/fscarmen/warp/main/warp-go.sh && bash warp-go.sh [option] [lisence]
再次运行
warp-go [option] [lisence]


:. p3terx
# Cloudflare WARP 一键配置脚本 功能菜单
bash <(curl -fsSL git.io/warp.sh) menu

# 自动配置 WARP WireGuard 双栈全局网络
bash <(curl -fsSL git.io/warp.sh) d

# 自动配置 WARP WireGuard IPv4 网络
bash <(curl -fsSL git.io/warp.sh) 4

# 自动配置 WARP WireGuard IPv6 网络
bash <(curl -fsSL git.io/warp.sh) 6

# 自动配置 WARP 官方客户端 SOCKS5 代理
bash <(curl -fsSL git.io/warp.sh) s5

# 查看 WARP 脚本子命令列表
bash <(curl -fsSL git.io/warp.sh) help
# 重启 WARP WireGuard 网络接口
systemctl restart wg-quick@wgcf
# 禁用 WARP WireGuard 网络接口
systemctl disable wg-quick@wgcf --now


【Gost】
wget --no-check-certificate -O gost.sh https://raw.githubusercontent.com/KANIKIG/Multi-EasyGost/master/gost.sh && chmod +x gost.sh && ./gost.sh


【ArgoX for VPS】
bash <(wget -qO- https://raw.githubusercontent.com/fscarmen/argox/main/argox.sh)

Option 参数	Remark 备注
-c	Chinese 中文
-e	English 英文
-f file	Variable file 参数文件
-u	Uninstall 卸载
-l	Export Node list 显示节点信息
-v	Sync Argo Xray to the newest 同步 Argo Xray 到最新版本

Argo Json 的获取
以 Debian 为例，需要用到的命令
wget -O cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb # 下载安装包
dpkg -i cloudflared.deb && rm -f cloudflared.deb # 安装并删除安装包
cloudflared login
cloudflared tunnel create 隧道名
cloudflared tunnel route dns 隧道名 二级域名.托管在CF上的一级域名
cat /root/.cloudflared/你生成的json文件  


【宝塔面板国际版】
Centos
yum install -y wget && wget -O install.sh http://www.aapanel.com/script/install_6.0_en.sh && bash install.sh aapanel

Ubuntu
wget -O install.sh http://www.aapanel.com/script/install-ubuntu_6.0_en.sh && sudo bash install.sh aapanel

Debian
wget -O install.sh http://www.aapanel.com/script/install-ubuntu_6.0_en.sh && bash install.sh aapanel     

【WARP Cli】
导入cloudflare存储库的gpg密钥：
curl https://pkg.cloudflareclient.com/pubkey.gpg | sudo gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg

添加cloudflare存储库：
echo "deb [arch=amd64 signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflare-client.list

安装warp客户端：
apt update
apt -y install cloudflare-warp

检查客户端是否正常运行：
systemctl status warp-svc

注册warp，只有注册了之后才能使用：
warp-cli register

把模式改为代理：
warp-cli set-mode proxy

默认情况下socks5是监听在本地的40000端口上，如果要修改这个端口，可以使用下面的命令：
warp-cli set-proxy-port 30000

检查warp的配置，查看当前的代理模式：
warp-cli settings

如果正常的话会有如下回显：
Mode: WarpProxy
Proxy listening on: 127.0.0.1:40000

现在就可以连接了：
warp-cli connect

查看连接是否成功：
warp-cli warp-stats

正常会有类似如下回显：
Endpoints: 162.159.xxx.xxx, 2606:4700:d0::xxxx:xxxx
Time since last handshake: 31s
Sent: 480.7kB; Received: 5.0MB
Estimated latency: 2ms
Estimated loss: 0.00%;

建议开启永久连接功能：
warp-cli enable-always-on

测试socks代理，检查ip是否改变
export ALL_PROXY=socks5://127.0.0.1:40000
curl ifconfig.me

验证其是否正常工作的最佳方法是运行我们的跟踪命令
curl https://www.cloudflare.com/cdn-cgi/trace/ --proxy socks5://127.0.0.1:40000
并查找以下输出：
warp=on

关于warp的设置就到这里，下面列出一些常用的warp客户端命令：
warp-cli disconnect // 断开连接
warp-cli disable-always-on // 关闭永久连接
warp-cli delete // 删除注册

curl chat.openai.com --proxy socks5://127.0.0.1:40000
curl ip.sb --proxy socks5://127.0.0.1:40000

环境变量断开ssh后失效
nano ~/.bashrc
{
export ALL_PROXY=socks5://127.0.0.1:40000
}
^O
^X

source ~/.bashrc


 【获取wireguard配置】
使用 **warp-go**，注册warp，导出wireguard配置

:.  for amd
mkdir warp && curl -sLo ./warp/warp https://gitlab.com/ProjectWARP/warp-go/-/releases/v1.0.8/downloads/warp-go_1.0.8_linux_amd64.tar.gz && tar -xzf ./warp/warp -C ./warp && cp ./warp/warp-go . && chmod 0755 warp-go && rm -r warp && ./warp-go --register && ./warp-go -export-singbox wireguard.json

:. for arm
mkdir warp && curl -sLo ./warp/warp https://gitlab.com/ProjectWARP/warp-go/-/releases/v1.0.8/downloads/warp-go_1.0.8_linux_arm64.tar.gz && tar -xzf ./warp/warp -C ./warp && cp ./warp/warp-go . && chmod 0755 warp-go && rm -r warp && ./warp-go --register && ./warp-go -export-singbox wireguard.json

打开 **wireguard.json**，复制"private_key"的值，粘贴到"secretKey": "",处，复制"reserved"的值，粘贴到"reserved":[0, 0, 0],处

-------
Register for WARP and upgrade to WARP+
--register --license <WARP+ license>

Upgrade to WARP+
The default loading configuration file is warp.conf, which can be modified by the --config parameter
--update --license <WARP+ license>

Sign up for WARP Team
Team configuration files need to be obtained using a special method
Please visit Warp Team Api (https://web--public--warp-team-api--coia-mfs4.code.run) to get Token as Team Config
--register --team-config <WARP Team Config>

【Install Docker】
:. Debian

sudo apt-get remove docker docker-engine docker.io containerd runc

sudo apt-get update
sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release

sudo mkdir -m 0755 -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

sudo docker run hello-world

:. Ubuntu
sudo apt-get remove docker docker-engine docker.io containerd runc

sudo apt-get update
sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release

sudo mkdir -m 0755 -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

sudo docker run hello-world



【Docker 1key】
From https://get.docker.com:
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh

From the source repo (This will install latest from the stable channel):
sh install.sh

To verify that the install script works amongst the supported operating systems run:
make shellcheck

【Install docker-compose】
curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

【Uninstall docker】
sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras

sudo rm -rf /var/lib/docker

sudo rm -rf /var/lib/containerd


【编译caddy+naive】
wget https://go.dev/dl/go1.20.2.linux-amd64.tar.gz
rm -rf /usr/local/go && tar -C /usr/local -xzf go1.20.2.linux-amd64.tar.gz
export PATH=$PATH:/usr/local/go/bin

go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest
~/go/bin/xcaddy build --with github.com/caddyserver/forwardproxy@caddy2=github.com/klzgrad/forwardproxy@naive
setcap cap_net_bind_service=+ep ./caddy

mkdir /etc/caddy/
cd /etc/caddy/
vim Caddyfile

chmod +x caddy
mv caddy /usr/bin/
/usr/bin/caddy run --config /etc/caddy/Caddyfile

systemctl daemon-reload
systemctl enable caddy
systemctl start caddy
systemctl status caddy


【OpenAI-Checker】
bash <(curl -Ls https://cpp.li/openai)
bash <(curl -Ls https://cdn.jsdelivr.net/gh/missuo/OpenAI-Checker/openai.sh)


【Speed test】
wget -qO- bench.sh | bash

curl -Lso- bench.sh | bash

wget -qO- 86.re/bench.sh | bash

curl -so- 86.re/bench.sh | bash


----
wget -qO- --no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash
#或者
curl -Lso- -no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superb


【Simple VPS Tools】
wget -O - 'https://raw.githubusercontent.com/wy580477/Simple_VPS_Tools/main/install.sh' | sh

rm -f /usr/local/bin/ouch /usr/local/bin/btop /usr/local/bin/tcping /usr/local/bin/nexttrace /usr/local/bin/doggo /usr/local/bin/speedtest /usr/local/bin/wormhole /usr/local/bin/duf /usr/local/bin/gdu /usr/local/bin/fd /usr/local/bin/bat


【workers代码】

addEventListener(
    "fetch", event => {
        let url = new URL(event.request.url);
        url.hostname = "复制你的域名";                        
        url.protocol = "https";
        let request = new Request(url, event.request);
        event.respondWith(
            fetch(request)
        )
    }
)


【Cloudflare端口】
 支持的 HTTP 端口：
80 8080 8880 2052 2082 2086 2095

支持的 HTTPS 端口：
443 2053 2083 2087 2096 8443


【科学上网命令安装】
先将文件上传到路由器的/tmp目录
mv /tmp/fancyss_hnd_lite.tar.gz /tmp/shadowsocks.tar.gz
tar -zxvf /tmp/shadowsocks.tar.gz
sh /tmp/shadowsocks/install.sh


【ss_rule_update】
sed -i 's/^URL_MAIN.*/URL_MAIN="https:\/\/raw.githubusercontent.com\/qxzg\/Actions\/3.0\/fancyss_rules"/g' /koolshare/scripts/ss_rule_update.sh


【UPX】
upx --lzma --ultra-brute xray


【VPS 测试工具】
CPU
curl -sL yabs.sh | bash -s -- -fi -5

硬盘
curl -sL yabs.sh | bash -s -- -ig

回程路由
BestTrace
curl -sLo besttrace https://github.com/chika0801/tool/raw/main/besttrace && chmod +x besttrace
./besttrace IP
./besttrace --tcp IP

NextTrace
curl -sLo nexttrace https://github.com/sjlleo/nexttrace/releases/latest/download/nexttrace_linux_amd64 && chmod +x nexttrace
./nexttrace IP
./nexttrace --tcp IP
./nexttrace --udp IP

MTR
apt install -y mtr
mtr --tcp --psize 1400 IP
mtr --udp --psize 1400 IP

traceroute
apt install -y traceroute
traceroute -l 1400 IP

流媒体解锁
bash <(curl -L -s check.unlock.media)
或
curl -sLo nf https://github.com/sjlleo/netflix-verify/releases/download/v3.1.0/nf_linux_amd64 && curl -sLo ytb https://github.com/sjlleo/TubeCheck/releases/download/1.0Beta/tubecheck_1.0beta_linux_amd64 && chmod +x nf ytb
./nf && ./ytb

测速
curl -sL https://raw.githubusercontent.com/chika0801/tool/main/speedtest.sh | bash
或
curl -sLo speedtest https://github.com/chika0801/tool/raw/main/speedtest && chmod +x speedtest
./speedtest


【跑分测试】
curl -sL yabs.sh | bash -s


【NETFLIX-VERIFY】
:. amd64
wget -O nf https://github.com/sjlleo/netflix-verify/releases/download/v3.1.0/nf_linux_amd64 && chmod +x nf && ./nf

:. arm64
wget -O nf https://github.com/sjlleo/netflix-verify/releases/download/v3.1.0/nf_linux_arm64 && chmod +x nf && ./nf



【freenom自动续期】
:. Install
docker run -d --name freenom --restart always -v $(pwd):/conf -v $(pwd)/logs:/app/logs luolongfei/freenom

:. Update
docker rm -f freenom && docker rmi -f luolongfei/freenom && docker run -d --name freenom --restart always -v $(pwd):/conf -v $(pwd)/logs:/app/logs luolongfei/freenom



【caddy配置校验&格式化】
caddy validate Caddyfile
caddy fmt --overwrite Caddyfile



【卸载软件或配置】
apt remove vim -y
apt purge vim -y


【宝塔国际版】
wget -O install.sh http://www.aapanel.com/script/install_6.0_en.sh && bash install.sh


【snap安装cerbot申请SSL/TLS证书】
apt install snapd
snap install core
snap refresh core
snap install --classic certbot
ln -s /snap/bin/certbot /usr/bin/certbot
certbot --nginx


【pip安装cerbot申请SSL/TLS证书】
apt install python3 python3-venv libaugeas0
python3 -m venv /opt/certbot/
/opt/certbot/bin/pip install --upgrade pip
/opt/certbot/bin/pip install certbot certbot-nginx
ln -s /opt/certbot/bin/certbot /usr/bin/certbot
certbot --nginx
echo "0 0,12 * * * root /opt/certbot/bin/python -c 'import random; import time; time.sleep(random.random() * 3600)' && certbot renew -q" | sudo tee -a /etc/crontab > /dev/null


【DD系统】
bash <(wget --no-check-certificate -qO- 'https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh') -d 11 -v 64 -p 123456 -port 22
